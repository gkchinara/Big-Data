import org.apache.spark.{SparkContext,SparkConf}
object DailyRevenue{
  def main(args: Array[String]) = {
     val conf = new SparkConf().setMaster(args[3]).setAppName("Daily Revenue")
     val sc = new SparkContext(conf)

     //Read order and orderItems
     val baseDir = args[0]
     val orders = sc.textFile(baseDir + "orders")
     val orderItems = sc.textFile(baseDir +"order_items")
  
     //Filter closed and completed orders
     val orderFiltered = orders.filter(od => (od.split(",")(3)=="COMPLETE" || od.split(",")(3)=="CLOSED"))
  
     //Convert order and orderItems to key value pairs
     val ordersKV = orderFiltered.map(od => (od.split(",")(0).toInt,od.split(",")(1)))
     val orderItemsKV = orderItems.map(ods=>(ods.split(",")(1).toInt,(ods.split(",")(2).toInt,ods.split(",")(4).toFloat)))
  
     val ordersJoin = ordersKV.join(orderItemsKV)
     val ordersJoinMap = ordersJoin.map(od=> ((od._2._1,od._2._2._1),od._2._2._2))
     val dailyRevenuePerProductId = ordersJoinMap.
       reduceByKey((revenue, order_item_subtotal) => revenue + order_item_subtotal)


     //Load products from local fie system to RDD

     import scala.io.Source
     val productsPath = args[1]
     val  productsRaw = Source.
       fromFile(productsPath).
       getLines.
       toList
     val products=sc.parallelize(productsRaw)
  
     val productsMap = products.
       map(product => (product.split(",")(0).toInt, product.split(",")(2)))
  
  
     // Join daily revenue per product id with products to get daily revenue per product (by name)
     val productsMap = products.
       map(product => (product.split(",")(0).toInt, product.split(",")(2)))
     //((order_date, order_product_id), daily_revenue_per_product_id)
     val dailyRevenuePerProductIdMap = dailyRevenuePerProductId.
       map(rec => (rec._1._2, (rec._1._1, rec._2)))
       //(order_product_id, (order_date, daily_revenue_per_product_id))

     val dailyRevenuePerProductJoin = dailyRevenuePerProductIdMap.join(productsMap)
     //(order_product_id, ((order_date, daily_revenue_per_product_id), product_name))

     // Sort the data by date in ascending order and by daily revenue per product in descending order
     val dailyRevenuePerProductSorted = dailyRevenuePerProductJoin.
       map(rec => ((rec._2._1._1, -rec._2._1._2), (rec._2._1._1, rec._2._1._2, rec._2._2))).
       sortByKey()
     //((order_date_asc, daily_revenue_per_product_id_desc), (order_date,daily_revenue_per_product,product_name))

     // Get data to desired format â€“ order_date,daily_revenue_per_product,product_name
     val dailyRevenuePerProduct = dailyRevenuePerProductSorted.
       map(rec => rec._2._1 + "," + rec._2._2 + "," + rec._2._3)
   
    
     //Save final output to HDFS in txt and Avro file format 
     val outputPath = args[3]
     daily_revenue_per_product.saveAsTextFile(outputPath)
 }
}